// A source code of ZedBoard - ADC expand board device driver for Linux.
// writer	: 

#include <linux/fs.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/sched.h>
#include <linux/interrupt.h>	// request_irq/free_irq
#include <linux/jiffies.h>		// jiffies
#include <linux/cdev.h>			// cdev_init/cdev_add/cdev_del
#include <linux/slab.h>			// kmalloc
#include "fpga_reg_util.h"


MODULE_AUTHOR("Kimura");
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("ADC board driver"); 

struct cdev *my_cdev;
struct fasync_struct *p_fasync_struct;
static int irq_number = 90;				// my IRQ number. default IRQ number is #90. 

module_param(irq_number, int, 0);		// You can specify this when to start the driver.

static char* devname = "adc device driver";

static int hello_open(struct inode* inode, struct file* pfile)
{
	printk(KERN_INFO "%s called", __func__);
	return 0;
}

static int hello_release(struct inode* inode, struct file* pfile)
{
	printk(KERN_INFO "%s called", __func__);
	return 0;
}

static ssize_t hello_read(struct file* pfile, char* buf, size_t count, loff_t* pos)
{
	printk(KERN_INFO "%s(%pF) called at process %i (%s) \r\n", __func__, &hello_read, current->pid, current->comm);
	return 0;
}

static ssize_t hello_write(struct file* pfile, const char* buf, size_t count, loff_t* pos)
{
	printk(KERN_INFO "%s(%pF) called", __func__, &hello_write);

	return count;
}

static int hello_ioctl(struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg)
{
	printk(KERN_INFO "%s(%pF) called", __func__, &hello_write);

	switch (cmd){
	default:
		return -ENOTTY;
	}

	return 0;
}

static int hello_fasync(int fd, struct file *filp, int mode){
	//struct inode *inode = filp->
	const int ret_val = fasync_helper(fd, filp, mode, &p_fasync_struct);
}

static struct file_operations hello_fops = 
{
	.owner			= THIS_MODULE,
	.read			= hello_read,
	.write			= hello_write,
	.open			= hello_open,
	.release		= hello_release,
	.unlocked_ioctl	= hello_ioctl,
	.fasync			= hello_fasync,
};

// Interrupt handler
static irqreturn_t test_interrupt_handler(int received_irq, void* dev_id)
{
	// 共有可能なドライバとするために、自分のドライバ以外の割込みならば、処理せずIRQ_NONEを返す。

	if (received_irq == irq_number){
		// 割り込みハンドラは極力早く処理を済ませるべき。今は問題ないが、printkもあまり良くない。
		printk("IRQ %d interrupted! dev_id \"%s\", jiffies %ld\r\n", received_irq, (char*)dev_id, jiffies);

		// 割込みが来たら、まずは割込みレジスタの中身を見る。
		const unsigned int reg_pushsw_int = read_fpga_register(0x20018 * sizeof(unsigned long));

		// どのプッシュスイッチからの割込みか確認する。
		if ((reg_pushsw_int & (1 << 0)) == (1 << 0)){
			printk("interrupt by pushsw(1)\r\n");	// SW1
		} else if ((reg_pushsw_int & (1 << 2)) == (1 << 2)){
			printk("interrupt by pushsw(2)\r\n");	// SW2
		} else if ((reg_pushsw_int & (1 << 4)) == (1 << 4)){
			printk("interrupt by pushsw(3)\r\n");	// SW3
		} else {
			printk("interrupted by unknown source, reg : %x\r\n", reg_pushsw_int);
		}

		// 割り込みが来たら、割り込みレジスタの割り込みフラグを'0'にして、割り込みをなくす。
		write_fpga_register(0x20018 * sizeof(unsigned long), (1 << 1) | (1 << 3) | (1 << 5));
		printk("%x : %08x\r\n", 0x20018 * sizeof(unsigned long), read_fpga_register(0x20018 * sizeof(unsigned long)));

		// 割込みが起きたので、ユーザープロセスに通知を送る
		if (p_fasync_struct){
			kill_fasync(&p_fasync_struct, SIGIO, POLL_OUT);
		}

		return IRQ_HANDLED;
	} else {
		return IRQ_NONE;
	}
}

static int __init hello_init(void)
{
	//// ドライバを、characteristic deviceとして登録する。(この方法は古いので、推奨されない。)
	//printk(KERN_INFO "Register as a character device(major : %d, devname : %s)\n", devmajor, devname);

	//if(register_chrdev(devmajor, devname, &hello_fops)){
	//	printk(KERN_NOTICE "register_chrdev() failed\r\n");
	//	return -EBUSY;
	//}

	// デバイス番号の割り当て
	dev_t allocated_device_number;
	const unsigned int alloc_count = 1;
	const int result = alloc_chrdev_region(&allocated_device_number, 0, alloc_count, devname);

	if (result < 0){
		printk(KERN_WARNING "can't get major number %d\r\n", MAJOR(allocated_device_number));
		return result;
	}

	// ドライバを登録する
	my_cdev			= cdev_alloc();
	my_cdev->ops	= &hello_fops;
	my_cdev->owner	= THIS_MODULE;

	const int err_code = cdev_add(my_cdev, allocated_device_number, 1);
	if (err_code){
		printk(KERN_NOTICE "Error %d adding %s\r\n", err_code, devname);
		return -EBUSY;
	} else {
		printk(KERN_NOTICE "We successfully added this device as %d %d\r\n", MAJOR(allocated_device_number), MINOR(allocated_device_number));
	}
	
	// 割り込みハンドラの登録
	printk(KERN_INFO "install %s into irq %d\n", devname, irq_number);

	// SA_SHIRQ → IRQF_SHARED、SA_INTERRUPT → IRQF_DISABLED
	if (request_irq(irq_number, test_interrupt_handler, IRQF_SHARED, devname, devname))
	{		
		// 登録できない時の終了処理
		printk(KERN_NOTICE "Failed at request_irq(), unregister driver (devnum : %d, devname : %s)\r\n", allocated_device_number, devname);
		cdev_del(my_cdev);
		
		return -EBUSY;
	}

	// 割り込みレジスタの割り込み許可フラグ(INT_EN)を立てて、割込めるようにしておく。
	map_fpga_register(XPAR_AXI_EXT_SLAVE_CONN_0_S_AXI_RNG00_BASEADDR, 0x20100 * sizeof(unsigned long));
	
	write_fpga_register(0x20018 * sizeof(unsigned long), ((1 << 1) | (1 << 3) | (1 << 5)));			// 0x2a
	print_fpga_registers();

	// 非同期通知用の構造体の確保
	p_fasync_struct = (struct fasync_struct*)kmalloc(sizeof(struct fasync_struct), GFP_ATOMIC);

	return 0;
}

static void __exit hello_exit(void)
{
	// 割込みハンドラの登録を解除する。
	printk(KERN_INFO "removing %s from irq %d\n", devname, irq_number);
	free_irq(irq_number, devname);

	// 割り込むこともないので、割込み許可フラグを0にする。
	write_fpga_register(0x20018 * sizeof(unsigned long), 0x00000000);
	unmap_fpga_register(XPAR_AXI_EXT_SLAVE_CONN_0_S_AXI_RNG00_BASEADDR, 0x20100 * sizeof(unsigned long));

	kfree(p_fasync_struct);
	
	// ドライバの登録を解除する。
	cdev_del(my_cdev);
	printk(KERN_INFO "unregister driver (devname : %s)\n", devname);
}

module_init(hello_init);
module_exit(hello_exit);